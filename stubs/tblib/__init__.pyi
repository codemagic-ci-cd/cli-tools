from _typeshed import Incomplete

class _AttrDict(dict):
    def __getattr__(self, name): ...

class __traceback_maker(Exception): ...
class TracebackParseError(Exception): ...

class Code:
    co_code: Incomplete
    co_filename: Incomplete
    co_name: Incomplete
    co_argcount: int
    co_kwonlyargcount: int
    co_varnames: Incomplete
    co_nlocals: int
    co_stacksize: int
    co_flags: int
    co_firstlineno: int
    def __init__(self, code) -> None: ...
    def __tproxy__(self, operation, *args, **kwargs): ...

class Frame:
    f_locals: Incomplete
    f_globals: Incomplete
    f_code: Incomplete
    f_lineno: Incomplete
    def __init__(self, frame) -> None: ...
    def clear(self) -> None: ...
    def __tproxy__(self, operation, *args, **kwargs): ...

class Traceback:
    tb_next: Incomplete
    tb_frame: Incomplete
    tb_lineno: Incomplete
    def __init__(self, tb) -> None: ...
    def as_traceback(self): ...
    to_traceback: Incomplete
    def __tproxy__(self, operation, *args, **kwargs): ...
    def as_dict(self): ...
    to_dict: Incomplete
    @classmethod
    def from_dict(cls, dct): ...
    @classmethod
    def from_string(cls, string, strict: bool = ...): ...
